[tox]
envlist =
    clean
    py{3.13,3.12,3.11,3.10,3.9,3.8}
    py3.8-mindeps
    cov-combine
    cov-report
    mypy
minversion = 4.22.0

[testenv]
package = wheel
# tox-uv currently has a bug that erases the built wheel environment
# when 'recreate=true' (as it is true when the 'sdkmain' factor is present).
# To overcome this, it's necessary to specify a different wheel build environment.
wheel_build_env =
    !sdkmain: build_wheel
    sdkmain: build_wheel_sdkmain
extras = test
passenv = GLOBUS_SDK_PATH
# When testing against SDK main it's necessary to recreate the tox environment
# so that the SDK main tarball is re-downloaded and installed for each run.
recreate =
    !sdkmain: false
    sdkmain: true
deps =
    mindeps: click==8.1.4
    mindeps: requests==2.19.1
    mindeps: pyjwt==2.0.0
    mindeps: cryptography==3.3.1
    mindeps: packaging==17.0
    sdkmain: https://github.com/globus/globus-sdk-python/archive/main.tar.gz
# the 'localsdk' factor allows CLI tests to be run against a local repo copy of globus-sdk
# it requires that the GLOBUS_SDK_PATH env var is set and uses subprocess and os to pass it as
# an argument to 'pip'
#
# This is unfortunately necessary: tox does not expand env vars in commands
#
# usage examples:
#   GLOBUS_SDK_PATH=../globus-sdk tox -e py3.11-localsdk
#   GLOBUS_SDK_PATH=../globus-sdk tox -e 'py{3.12,3.11,3.10,3.9,3.8}-localsdk'
commands =
    localsdk: python -c 'import os, subprocess, sys; subprocess.run([sys.executable, "-m", "pip", "install", "-e", os.environ["GLOBUS_SDK_PATH"]])'
    coverage run -m pytest {posargs}
depends =
    py{3.12,3.11,3.10,3.9,3.8}{,-mindeps}: clean
    cov-combine: py{3.12,3.11,3.10,3.9,3.8}{,-mindeps}
    cov-report: cov-combine

[testenv:clean]
deps =
    coverage
    setuptools
skip_install = true
commands =
    python setup.py clean --all
    coverage erase

[testenv:cov-combine]
deps = coverage
skip_install = true
commands = coverage combine

[testenv:cov-report]
deps = coverage
skip_install = true
commands_pre = coverage html --fail-under=0
commands = coverage report

[testenv:lint]
deps = pre-commit
recreate = true
skip_install = true
commands = pre-commit run --all-files

[testenv:mypy]
dependency_groups = typing
commands = mypy {posargs:src/}
[testenv:mypy-py38]
base = mypy
commands = mypy --python-version "3.8" {posargs:src/}
[testenv:mypy-py313]
base = mypy
commands = mypy --python-version "3.13" {posargs:src/}

[testenv:reference]
allowlist_externals = find
commands_pre = find reference/ -name "*.adoc" -type f -delete
commands = python ./reference/_generate.py {posargs}

[testenv:twine-check]
skip_install = true
deps =
    build
    twine
allowlist_externals = rm
commands_pre = rm -rf dist/
# check that twine validating package data works
commands =
    python -m build
    twine check dist/*

[testenv:prepare-release]
skip_install = true
deps = scriv[toml]
commands =
    scriv collect
    python ./changelog.d/post-fix-changelog.py changelog.adoc

[testenv:publish-release]
skip_install = true
deps =
    build
    twine
# clean the build dir before rebuilding
allowlist_externals = rm
commands_pre = rm -rf dist/
commands =
    python -m build
    twine upload dist/*
